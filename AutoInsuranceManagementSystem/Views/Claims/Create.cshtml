@model AutoInsuranceManagementSystem.ViewModels.ClaimCreateViewModel
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@{
    ViewData["Title"] = "Submit New Claim";
    var isAdmin = User.IsInRole("Admin");
}

@section Styles {
    <style>
        :root {
            --claim-form-card-radius: 0.75rem;
            --claim-header-admin-bg: linear-gradient(135deg, #1e5abc, #2a6fdb);
            --claim-header-customer-bg: linear-gradient(135deg, #146c43, #198754);
            --form-section-title-color: #2c3e50;
        }

        .submit-claim-card {
            border-radius: var(--claim-form-card-radius);
            background-color: #fff;
        }

            .submit-claim-card .card-header {
                color: #fff !important;
                border-bottom: none;
                padding: 1.25rem 1.75rem;
                border-top-left-radius: var(--claim-form-card-radius) !important;
                border-top-right-radius: var(--claim-form-card-radius) !important;
            }

                .submit-claim-card .card-header.admin-header {
                    background: var(--claim-header-admin-bg) !important;
                }

                .submit-claim-card .card-header.customer-header {
                    background: var(--claim-header-customer-bg) !important;
                }

                .submit-claim-card .card-header h4 {
                    font-family: 'Poppins', sans-serif;
                    font-weight: 600;
                    font-size: 1.5rem;
                    margin-bottom: 0;
                }

                .submit-claim-card .card-header .bi {
                    font-size: 1.2em;
                    vertical-align: -0.1em;
                    margin-right: 0.6rem;
                }

            .submit-claim-card .card-body {
                padding: 2rem 2.5rem;
            }

            .submit-claim-card .mb-3, .submit-claim-card .mb-4, .submit-claim-card .row.g-3.mb-3 {
                margin-bottom: 1.75rem !important;
            }

        .form-label.fw-semibold {
            font-weight: 500 !important;
            color: #343a40;
            margin-bottom: 0.4rem;
        }

        .form-control, .form-select {
            border-radius: 50px !important;
            padding: 0.65rem 1rem;
            border: 1px solid #ced4da;
        }

            .form-control.rounded-3 {
                border-radius: 0.5rem !important;
            }

            .form-control:focus, .form-select:focus {
                border-color: #198754;
                box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
            }

        .input-group .input-group-text {
            border-color: #ced4da;
            background-color: #f8f9fa;
            border-radius: 50px 0 0 50px;
        }

        .upload-section {
            padding-top: 1.5rem;
            margin-top: 1.5rem;
            border-top: 1px solid #e0e7ff;
        }

        .upload-section-title {
            font-family: 'Poppins', sans-serif;
            font-weight: 600;
            color: var(--form-section-title-color);
            font-size: 1.2rem;
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
        }

            .upload-section-title .bi {
                color: #2a6fdb;
                margin-right: 0.75rem;
                font-size: 1.1em;
            }

        .form-text {
            font-size: 0.85em;
            color: #6c757d;
            margin-top: 0.4rem;
        }

        #calculation-breakdown {
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 0.5rem;
            padding: 1.5rem;
            margin-top: 1rem;
            display: none; /* Hidden by default */
        }

            #calculation-breakdown h6 {
                font-family: 'Poppins', sans-serif;
                font-weight: 600;
                margin-bottom: 1rem;
                color: #495057;
            }

            #calculation-breakdown dt {
                color: #6c757d;
                font-weight: 500;
            }

            #calculation-breakdown dd {
                color: #212529;
                font-weight: 600;
            }

            #calculation-breakdown .final-payable {
                margin-top: 1rem;
                padding-top: 1rem;
                border-top: 1px solid #dee2e6;
            }

                #calculation-breakdown .final-payable dt {
                    font-size: 1.1rem;
                    color: #000;
                }

                #calculation-breakdown .final-payable dd {
                    font-size: 1.25rem;
                    color: #198754;
                }

        .action-buttons {
            margin-top: 2.5rem;
        }

            .action-buttons .btn {
                min-width: 150px;
                padding-top: 0.7rem;
                padding-bottom: 0.7rem;
                font-weight: 500;
            }

                .action-buttons .btn .bi {
                    vertical-align: -0.1em;
                }
    </style>
}

<div class="row justify-content-center">
    <div class="col-md-9 col-lg-8">
        <div class="card submit-claim-card">
            <div class="card-header @(isAdmin ? "admin-header" : "customer-header")">
                <h4 class="mb-0"><i class="bi bi-shield-exclamation"></i>@ViewData["Title"]</h4>
            </div>
            <div class="card-body">
                <form asp-action="Create" method="post" enctype="multipart/form-data">
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger rounded-3 mb-4" role="alert"></div>

                    <div class="mb-3">
                        <label asp-for="PolicyId" class="form-label fw-semibold">Select Your Policy</label>
                        <select asp-for="PolicyId" class="form-select" asp-items="ViewBag.AvailablePolicies">
                            <option value="">-- Select Policy --</option>
                        </select>
                        <span asp-validation-for="PolicyId" class="text-danger small"></span>
                    </div>

                    <div class="row g-3 mb-3">
                        <div class="col-md-6">
                            <label asp-for="ClaimDate" class="form-label fw-semibold">Date of Incident</label>
                            <input asp-for="ClaimDate" type="date" class="form-control" />
                            <span asp-validation-for="ClaimDate" class="text-danger small"></span>
                        </div>
                        <div class="col-md-6">
                            <label asp-for="ClaimAmount" class="form-label fw-semibold">Total Estimated Repair Cost (by Garage)</label>
                            <div class="input-group">
                                <span class="input-group-text">₹</span>
                                <input asp-for="ClaimAmount" type="number" step="100" class="form-control" placeholder="Select a policy first" />
                            </div>
                            <span asp-validation-for="ClaimAmount" class="text-danger small"></span>
                        </div>
                    </div>

                    <div id="calculation-breakdown">
                        <h6>Calculation Breakdown</h6>
                        <dl class="row mb-0">
                            <dt class="col-sm-7">Total Estimate</dt>
                            <dd class="col-sm-5 text-end" id="breakdown-total">₹0.00</dd>

                            <dt class="col-sm-7">Less: Depreciation (<span id="dep-rate">0</span>%)</dt>
                            <dd class="col-sm-5 text-end text-danger" id="breakdown-depreciation">- ₹0.00</dd>

                            <dt class="col-sm-7">Less: Compulsory Deductible</dt>
                            <dd class="col-sm-5 text-end text-danger" id="breakdown-compulsory">- ₹0.00</dd>

                            <div class="col-12 final-payable">
                                <dl class="row mb-0">
                                    <dt class="col-sm-7">Estimated Payable Amount</dt>
                                    <dd class="col-sm-5 text-end" id="breakdown-payable">₹0.00</dd>
                                </dl>
                            </div>
                        </dl>
                    </div>

                    <div class="mb-4 mt-4">
                        <label asp-for="Description" class="form-label fw-semibold">Detailed Description of Incident</label>
                        <textarea asp-for="Description" class="form-control rounded-3" rows="5" placeholder="Describe the incident, damages, location, etc..."></textarea>
                        <span asp-validation-for="Description" class="text-danger small"></span>
                    </div>

                    <!-- **RESTORED**: File Upload Section -->
                    <div class="upload-section">
                        <h5 class="upload-section-title"><i class="bi bi-paperclip"></i>Upload Supporting Documents</h5>
                        <div class="mb-4">
                            <label asp-for="PhotoProof" class="form-label fw-semibold">Photo Proof (Images of Damage, Scene)</label>
                            <input asp-for="PhotoProof" type="file" class="form-control" accept="image/jpeg,image/png,image/gif" />
                            <span asp-validation-for="PhotoProof" class="text-danger small"></span>
                            <div class="form-text">Accepted: JPG, PNG, GIF. Max 5MB.</div>
                        </div>
                        <div class="mb-3">
                            <label asp-for="VideoProof" class="form-label fw-semibold">Video Proof (Optional)</label>
                            <input asp-for="VideoProof" type="file" class="form-control" accept="video/mp4,video/quicktime,video/x-msvideo,video/x-matroska" />
                            <span asp-validation-for="VideoProof" class="text-danger small"></span>
                            <div class="form-text">Accepted: MP4, MOV, AVI, MKV. Max 50MB.</div>
                        </div>
                    </div>

                    <div class="d-grid gap-2 d-md-flex justify-content-md-end action-buttons">
                        <button type="submit" class="btn @(isAdmin ? "btn-primary" : "btn-success") rounded-pill px-4"><i class="bi bi-send-fill me-2"></i>Submit Claim</button>
                        <a asp-controller="Claims" asp-action="@(User.IsInRole("Customer") ? "MyClaims" : "Index")" class="btn btn-outline-secondary rounded-pill px-4"><i class="bi bi-arrow-left-circle-fill me-2"></i>Back to List</a>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const policySelect = document.getElementById('PolicyId');
            const claimAmountInput = document.getElementById('ClaimAmount');
            const breakdownDiv = document.getElementById('calculation-breakdown');
            let currentPolicyDetails = {};

            const formatter = new Intl.NumberFormat('en-IN', { style: 'currency', currency: 'INR' });

            function calculateAndDisplayBreakdown() {
                if (!currentPolicyDetails.coverageAmount || !claimAmountInput.value) {
                    breakdownDiv.style.display = 'none';
                    return;
                }

                breakdownDiv.style.display = 'block';

                const totalEstimate = parseFloat(claimAmountInput.value) || 0;

                // Simplified Assumption: 50% parts, 50% labor.
                const estimatedPartsCost = totalEstimate * 0.5;

                // 1. Depreciation Calculation
                let depreciationRate = 0;
                let depreciationInfoText = '0';
                if (!currentPolicyDetails.hasZeroDepreciation) {
                    const age = currentPolicyDetails.vehicleAge;
                    if (age > 10) { depreciationRate = 0.5; }
                    else if (age > 5) { depreciationRate = 0.4; }
                    else if (age > 4) { depreciationRate = 0.3; }
                    else if (age > 3) { depreciationRate = 0.25; }
                    else if (age > 2) { depreciationRate = 0.15; }
                    else if (age > 1) { depreciationRate = 0.10; }
                    else if (age > 0.5) { depreciationRate = 0.05; }
                    depreciationInfoText = (depreciationRate * 100).toFixed(0);
                } else {
                    depreciationInfoText = '0 (Zero Dep)';
                }
                const depreciationDeduction = estimatedPartsCost * depreciationRate;

                // 2. Compulsory Deductible
                const compulsoryDeductible = (currentPolicyDetails.engineCC > 1500) ? 2000 : 1000;

                let payableAmount = totalEstimate - depreciationDeduction - compulsoryDeductible;

                payableAmount = Math.max(0, payableAmount);
                payableAmount = Math.min(payableAmount, currentPolicyDetails.coverageAmount);

                document.getElementById('breakdown-total').textContent = formatter.format(totalEstimate);
                document.getElementById('dep-rate').textContent = depreciationInfoText;
                document.getElementById('breakdown-depreciation').textContent = `- ${formatter.format(depreciationDeduction)}`;
                document.getElementById('breakdown-compulsory').textContent = `- ${formatter.format(compulsoryDeductible)}`;
                document.getElementById('breakdown-payable').textContent = formatter.format(payableAmount);
            }

            policySelect.addEventListener('change', function () {
                const policyId = this.value;

                if (!policyId) {
                    currentPolicyDetails = {};
                    claimAmountInput.placeholder = 'Select a policy first';
                    claimAmountInput.value = '';
                    calculateAndDisplayBreakdown();
                    return;
                }

                fetch(`/Claims/GetPolicyDetails/${policyId}`)
                    .then(response => response.ok ? response.json() : Promise.reject('Failed to fetch'))
                    .then(data => {
                        currentPolicyDetails = data;

                        claimAmountInput.placeholder = `Max Claim: ${formatter.format(data.coverageAmount)}`;
                        claimAmountInput.max = data.coverageAmount;
                        claimAmountInput.value = '';

                        calculateAndDisplayBreakdown();
                    })
                    .catch(error => {
                        console.error('Error fetching policy details:', error);
                        currentPolicyDetails = {};
                        claimAmountInput.placeholder = 'Could not fetch policy details';
                        calculateAndDisplayBreakdown();
                    });
            });

            claimAmountInput.addEventListener('input', calculateAndDisplayBreakdown);

            if (policySelect.value) {
                policySelect.dispatchEvent(new Event('change'));
            }
        });
    </script>
}
