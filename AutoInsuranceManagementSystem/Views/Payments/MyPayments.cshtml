@model IEnumerable<AutoInsuranceManagementSystem.Models.Payment>
@{
    ViewData["Title"] = "My Payment History";
}

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="display-6 mb-0 text-primary">@ViewData["Title"]</h1>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show rounded-3 shadow-sm" role="alert">
            <i class="bi bi-check-circle-fill me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show rounded-3 shadow-sm" role="alert">
            <i class="bi bi-exclamation-triangle-fill me-2"></i>@TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card shadow-lg rounded-4 mt-4">
        <div class="card-header bg-primary text-white rounded-top-4 py-3">
            <h5 class="mb-0">Your Payment Records</h5>
        </div>
        <div class="card-body p-4">
            <div class="table-responsive">
                <table class="table table-hover table-striped align-middle mb-0">
                    <thead class="table-light">
                        <tr>
                            <th scope="col">Payment ID</th>
                            <th scope="col">Policy No.</th>
                            <th scope="col">Offering</th>
                            <th scope="col">@Html.DisplayNameFor(model => model.FirstOrDefault().Amount)</th>
                            <th scope="col">@Html.DisplayNameFor(model => model.FirstOrDefault().PaymentDate)</th>
                            <th scope="col">@Html.DisplayNameFor(model => model.FirstOrDefault().Method)</th>
                            <th scope="col">@Html.DisplayNameFor(model => model.FirstOrDefault().Status)</th>
                            <th scope="col">Transaction ID</th>
                            <th scope="col" class="text-center">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (!Model.Any())
                        {
                            <tr>
                                <td colspan="9" class="text-center py-5 text-muted">
                                    <i class="bi bi-info-circle me-2"></i>You have no payment records.
                                    <div class="mt-3">
                                        Consider purchasing a policy to get started!
                                    </div>
                                </td>
                            </tr>
                        }
                        @foreach (var item in Model)
                        {
                            <tr>
                                <td><span class="text-primary fw-semibold">PAY-@item.PaymentId.ToString("D5")</span></td>
                                <td><a asp-controller="Policies" asp-action="Details" asp-route-id="@item.PolicyId" class="text-decoration-none text-info policy-link">@item.Policy?.PolicyNumber</a></td>
                                <td>@item.Policy?.PolicyOffering?.OfferingName</td>
                                <td>@item.Amount.ToString("C")</td>
                                <td>@item.PaymentDate.ToString("yyyy-MM-dd HH:mm")</td>
                                <td>@Html.DisplayFor(modelItem => item.Method)</td>
                                <td>
                                    @{
                                        string badgeClass = "";
                                        string textColorClass = "";
                                        switch (item.Status)
                                        {
                                            case PaymentStatus.SUCCESS:
                                                badgeClass = "bg-success";
                                                textColorClass = "text-white";
                                                break;
                                            case PaymentStatus.FAILED:
                                                badgeClass = "bg-danger";
                                                textColorClass = "text-white";
                                                break;
                                            case PaymentStatus.PENDING:
                                            default:
                                                badgeClass = "bg-warning";
                                                textColorClass = "text-dark";
                                                break;
                                        }
                                    }
                                    <span class="badge @badgeClass @textColorClass rounded-pill px-3 py-2 fw-semibold payment-status-badge">
                                        @Html.DisplayFor(modelItem => item.Status)
                                    </span>
                                </td>
                                <td class="text-muted fs-tiny">@Html.DisplayFor(modelItem => item.TransactionId)</td>
                                <td class="text-center">
                                    <a asp-action="Details" asp-route-id="@item.PaymentId" class="btn btn-sm btn-outline-primary rounded-pill px-3 shadow-sm" title="View Details">
                                        <i class="bi bi-receipt me-1"></i> View
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<style>
    /* Custom styles for minor enhancements */
    .fs-tiny {
        font-size: 0.85em;
    }

    .table-hover tbody tr:hover {
        background-color: #f8f9fa; /* Lighter hover effect */
        box-shadow: 0 4px 12px rgba(0,0,0,0.1); /* Slightly more pronounced shadow */
        transform: translateY(-2px);
        transition: all 0.3s ease-in-out; /* Smoother transition */
    }

    .badge {
        font-weight: 600; /* Bolder font weight for badges */
        font-size: 0.9em; /* Slightly larger font size for badges */
        text-transform: uppercase; /* Uppercase for status for better distinction */
    }

    /* Specific styles for the Payment Status badge */
    .payment-status-badge {
        text-shadow: none; /* Crucial: Remove any text shadow that might cause blurriness */
    }

    /* Policy number link styling */
    .policy-link {
        font-weight: 500;
        transition: color 0.2s ease-in-out;
    }

        .policy-link:hover {
            color: #0056b3 !important; /* Darker blue on hover */
            text-decoration: underline !important;
        }
</style>